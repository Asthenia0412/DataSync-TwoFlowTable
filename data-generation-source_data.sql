USE source_data;

-- Insert 1000 rows into university_core
INSERT INTO university_core (university_id, name_std, country_code, data_source, original_id, status, last_merge_time)
SELECT 
    n AS university_id,
    CONCAT('University ', n) AS name_std,
    CASE 
        WHEN n % 10 = 0 THEN 'USA'
        WHEN n % 10 = 1 THEN 'CHN'
        WHEN n % 10 = 2 THEN 'GBR'
        WHEN n % 10 = 3 THEN 'CAN'
        WHEN n % 10 = 4 THEN 'AUS'
        WHEN n % 10 = 5 THEN 'JPN'
        WHEN n % 10 = 6 THEN 'DEU'
        WHEN n % 10 = 7 THEN 'FRA'
        WHEN n % 10 = 8 THEN 'IND'
        ELSE 'SGP'
    END AS country_code,
    CASE 
        WHEN n % 3 = 0 THEN 'QS'
        WHEN n % 3 = 1 THEN 'THE'
        ELSE 'Internal'
    END AS data_source,
    CONCAT('ORIG_', n) AS original_id,
    CASE 
        WHEN n % 4 = 0 THEN 'Active'
        WHEN n % 4 = 1 THEN 'Merged'
        WHEN n % 4 = 2 THEN 'Pending'
        ELSE 'Inactive'
    END AS status,
    NOW() - INTERVAL FLOOR(RAND() * 365) DAY AS last_merge_time
FROM (
    SELECT a.N + b.N * 10 + c.N * 100 + 1 AS n
    FROM 
        (SELECT 0 AS N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) a,
        (SELECT 0 AS N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) b,
        (SELECT 0 AS N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) c
    WHERE a.N + b.N * 10 + c.N * 100 < 1000
    ORDER BY n
) numbers;

-- Insert 1000 rows into legacy_student
INSERT INTO legacy_student (id, name, gender, birth_date)
SELECT 
    n AS id,
    CONCAT('Student ', n) AS name,
    CASE 
        WHEN n % 2 = 0 THEN 'Male'
        ELSE 'Female'
    END AS gender,
    DATE_SUB('2005-01-01', INTERVAL FLOOR(RAND() * 3650) DAY) AS birth_date
FROM (
    SELECT a.N + b.N * 10 + c.N * 100 + 1 AS n
    FROM 
        (SELECT 0 AS N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) a,
        (SELECT 0 AS N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) b,
        (SELECT 0 AS N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) c
    WHERE a.N + b.N * 10 + c.N * 100 < 1000
    ORDER BY n
) numbers;

-- Insert 1000 rows into legacy_consult
INSERT INTO legacy_consult (id, student_id, university_id, consult_time)
SELECT 
    n AS id,
    (FLOOR(RAND() * 1000) + 1) AS student_id,
    (FLOOR(RAND() * 1000) + 1) AS university_id,
    NOW() - INTERVAL FLOOR(RAND() * 365) DAY AS consult_time
FROM (
    SELECT a.N + b.N * 10 + c.N * 100 + 1 AS n
    FROM 
        (SELECT 0 AS N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) a,
        (SELECT 0 AS N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) b,
        (SELECT 0 AS N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) c
    WHERE a.N + b.N * 10 + c.N * 100 < 1000
    ORDER BY n
) numbers;

-- Insert 1000 rows into legacy_application
INSERT INTO legacy_application (id, student_id, university_id, apply_time)
SELECT 
    n AS id,
    (FLOOR(RAND() * 1000) + 1) AS student_id,
    (FLOOR(RAND() * 1000) + 1) AS university_id,
    NOW() - INTERVAL FLOOR(RAND() * 365) DAY AS apply_time
FROM (
    SELECT a.N + b.N * 10 + c.N * 100 + 1 AS n
    FROM 
        (SELECT 0 AS N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) a,
        (SELECT 0 AS N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) b,
        (SELECT 0 AS N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) c
    WHERE a.N + b.N * 10 + c.N * 100 < 1000
    ORDER BY n
) numbers;

-- Insert 1000 rows into legacy_payment
INSERT INTO legacy_payment (id, student_id, order_no, amount)
SELECT 
    n AS id,
    (FLOOR(RAND() * 1000) + 1) AS student_id,
    CONCAT('ORDER_', n) AS order_no,
    ROUND(RAND() * 5000 + 100, 2) AS amount
FROM (
    SELECT a.N + b.N * 10 + c.N * 100 + 1 AS n
    FROM 
        (SELECT 0 AS N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) a,
        (SELECT 0 AS N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) b,
        (SELECT 0 AS N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) c
    WHERE a.N + b.N * 10 + c.N * 100 < 1000
    ORDER BY n
) numbers;

-- Insert 1000 rows into legacy_contract
INSERT INTO legacy_contract (id, student_id, contract_no, sign_time)
SELECT 
    n AS id,
    (FLOOR(RAND() * 1000) + 1) AS student_id,
    CONCAT('CONTRACT_', n) AS contract_no,
    NOW() - INTERVAL FLOOR(RAND() * 365) DAY AS sign_time
FROM (
    SELECT a.N + b.N * 10 + c.N * 100 + 1 AS n
    FROM 
        (SELECT 0 AS N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) a,
        (SELECT 0 AS N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) b,
        (SELECT 0 AS N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) c
    WHERE a.N + b.N * 10 + c.N * 100 < 1000
    ORDER BY n
) numbers;

-- Insert 1000 rows into legacy_review
INSERT INTO legacy_review (id, student_id, university_id, rating)
SELECT 
    n AS id,
    (FLOOR(RAND() * 1000) + 1) AS student_id,
    (FLOOR(RAND() * 1000) + 1) AS university_id,
    FLOOR(RAND() * 5) + 1 AS rating
FROM (
    SELECT a.N + b.N * 10 + c.N * 100 + 1 AS n
    FROM 
        (SELECT 0 AS N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) a,
        (SELECT 0 AS N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) b,
        (SELECT 0 AS N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) c
    WHERE a.N + b.N * 10 + c.N * 100 < 1000
    ORDER BY n
) numbers;

-- Insert 1000 rows into legacy_favorite
INSERT INTO legacy_favorite (id, student_id, university_id, create_time)
SELECT 
    n AS id,
    (FLOOR(RAND() * 1000) + 1) AS student_id,
    (FLOOR(RAND() * 1000) + 1) AS university_id,
    NOW() - INTERVAL FLOOR(RAND() * 365) DAY AS create_time
FROM (
    SELECT a.N + b.N * 10 + c.N * 100 + 1 AS n
    FROM 
        (SELECT 0 AS N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) a,
        (SELECT 0 AS N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) b,
        (SELECT 0 AS N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) c
    WHERE a.N + b.N * 10 + c.N * 100 < 1000
    ORDER BY n
) numbers;

-- Insert 1000 rows into legacy_document
INSERT INTO legacy_document (id, student_id, file_type, upload_time)
SELECT 
    n AS id,
    (FLOOR(RAND() * 1000) + 1) AS student_id,
    CASE 
        WHEN n % 3 = 0 THEN 'Transcript'
        WHEN n % 3 = 1 THEN 'Recommendation'
        ELSE 'Personal Statement'
    END AS file_type,
    NOW() - INTERVAL FLOOR(RAND() * 365) DAY AS upload_time
FROM (
    SELECT a.N + b.N * 10 + c.N * 100 + 1 AS n
    FROM 
        (SELECT 0 AS N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) a,
        (SELECT 0 AS N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) b,
        (SELECT 0 AS N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) c
    WHERE a.N + b.N * 10 + c.N * 100 < 1000
    ORDER BY n
) numbers;

-- Insert 1000 rows into legacy_notification
INSERT INTO legacy_notification (id, receiver_id, message_type, send_time)
SELECT 
    n AS id,
    (FLOOR(RAND() * 1000) + 1) AS receiver_id,
    CASE 
        WHEN n % 3 = 0 THEN 'Application Update'
        WHEN n % 3 = 1 THEN 'Payment Confirmation'
        ELSE 'Consultation Reminder'
    END AS message_type,
    NOW() - INTERVAL FLOOR(RAND() * 365) DAY AS send_time
FROM (
    SELECT a.N + b.N * 10 + c.N * 100 + 1 AS n
    FROM 
        (SELECT 0 AS N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) a,
        (SELECT 0 AS N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) b,
        (SELECT 0 AS N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) c
    WHERE a.N + b.N * 10 + c.N * 100 < 1000
    ORDER BY n
) numbers;

-- Insert 1000 rows into legacy_audit
INSERT INTO legacy_audit (id, operator_id, operation_type, operation_time)
SELECT 
    n AS id,
    (FLOOR(RAND() * 1000) + 1) AS operator_id,
    CASE 
        WHEN n % 3 = 0 THEN 'Create'
        WHEN n % 3 = 1 THEN 'Update'
        ELSE 'Delete'
    END AS operation_type,
    NOW() - INTERVAL FLOOR(RAND() * 365) DAY AS operation_time
FROM (
    SELECT a.N + b.N * 10 + c.N * 100 + 1 AS n
    FROM 
        (SELECT 0 AS N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) a,
        (SELECT 0 AS N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) b,
        (SELECT 0 AS N UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) c
    WHERE a.N + b.N * 10 + c.N * 100 < 1000
    ORDER BY n
) numbers;